name: "Validate and Deploy Infrastructure"

on:
  push:
    branches:
      - main
      - tf-w1-network
      - tf-w3-eks
      - tf-chore1-cicd
  pull_request:

jobs:
  terra-fmt:
    name: "Check terraform files format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Terraform cli
        run: |
          sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && sleep 5
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main" && sleep 10
          sudo apt install terraform 
          terraform version

      - name: Terraform Format
        if: github.ref == 'refs/heads/tf-chore1-cicd'
        id: fmt
        run: |
           echo -e "$(tput setaf 4)$(tput setab 7)NETWORK$(tput sgr 0)"
           ls -al terraform && cd terraform/net && terraform fmt -check
           echo -e "$(tput setaf 1)$(tput setab 7)EKS$(tput sgr 0)"
           cd ../eks && terraform fmt -check


  terra-plan:
    name: "View terraform plan"
    needs: terra-fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Terraform cli
        run: |
          sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add - && sleep 5
          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main" && sleep 10
          sudo apt install terraform 
          terraform version

      - name: Terraform Init
        if: github.ref == 'refs/heads/tf-chore1-cicd'
        id: init
        run: | 
           echo -e "$(tput setaf 4)$(tput setab 7)NETWORK$(tput sgr 0)"
           cd terraform/net && terraform init
           echo -e "$(tput setaf 1)$(tput setab 7)EKS$(tput sgr 0)"
           cd ../eks && terraform init

      - name: Terraform Validate
        if: github.ref == 'refs/heads/tf-chore1-cicd'
        id: validate
        run: | 
           echo -e "$(tput setaf 4)$(tput setab 7)NETWORK$(tput sgr 0)"
           cd terraform/net && terraform validate -no-color
           echo -e "$(tput setaf 1)$(tput setab 7)EKS$(tput sgr 0)"
           cd ../eks && terraform validate -no-color

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        id: plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
           echo -e "$(tput setaf 4)$(tput setab 7)NETWORK$(tput sgr 0)"
           cd terraform/net && terraform plan -no-color
           echo -e "$(tput setaf 1)$(tput setab 7)EKS$(tput sgr 0)"
           cd ../eks && terraform plan -no-color
        continue-on-error: true




#### TO DO, Fix the automatic comment creation upon PR or push ####

#      - uses: actions/github-script@v5
#        if: github.event_name == 'pull_request' || github.event_name == 'push'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        with:
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#            <details><summary>Show Plan</summary>
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#            </details>
#            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1